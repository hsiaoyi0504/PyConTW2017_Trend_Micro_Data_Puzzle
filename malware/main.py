import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import zipfile
import json
import math
from sklearn.cluster import KMeans, AgglomerativeClustering
from sklearn.decomposition import PCA

NUMBER_OF_CLUSTERS = 5
RANDOM_STATE = 1500

zf = zipfile.ZipFile('./TrendMicro-malware-dataset-pycon.zip', 'r')
for f in zf.namelist()[:4]:
    data = zf.read(f).decode("utf8")
feats=[]
lbs=[]
tags = set()
for f in zf.namelist():
    if 'info' not in f: continue
    data = zf.read(f)
    j = json.loads(data.decode("utf-8"))
    for key in j:
        if key not in tags:
            tags.add(key)
    try:
        feats.append(
            (
                float(j['FileEntropy']),
                math.log(float(j['FileSize'])),
                math.log(float(j['SizeOfImage'])),
                math.log(float(j['SizeOfCode']))
            )
        )
        lbs.append(f.split('/')[1])
    except:
        continue

cluster = KMeans(n_clusters=NUMBER_OF_CLUSTERS, random_state=RANDOM_STATE)
cluster.fit(feats)

target_data=['A. 00034ba766f8721f43999bbfa341969fac85fdfe',
    'B. 0025b66c923168bf934d6ea74f64cd68511cfc18',
    'C. 004950b412188d2e53d2b3b5ae965faf6e9f45ee',
    'D. 00d71709950d1a97c1faa8dee2e5d98bde4db3ec',
    'E. 02985f4076d6e4b4b4fdf0141c7171e887377f1b',
    'F. 02e81a7cb55a956ef6b1499d4d3d56d4fbd2e818',
    'G. 03214459440feff531bd3187ca981a104de9c137'
]

group_dict={}
for f in target_data:
    i=lbs.index(f.split()[1])
    print(f, cluster.labels_[i])
    if cluster.labels_[i] not in group_dict:
        group_dict[cluster.labels_[i]] = []
        group_dict[cluster.labels_[i]].append(f)
    else:
        group_dict[cluster.labels_[i]].append(f)

test_data=['1. 00724a6fa856016f98006346f65edf308753e341',
    '2. 0076ad9b2c2c30912a1a045b9233c3fd1c113dcb',
    '3. 007e9931c4662b6a772f14ebb2bb9235d6145f8a',
    '4. 00989035116f2d6beedee8e0a7e9192cfbbd4cb8',
    '5. 00ac1a2eb8cfee4e3d36190309768154bba0c922',
    '6. 00adec6a2cae04d4775cdf43d46652f123b9b502',
    '7. 00ce2ff9017c270a6bca471f34ebcba12c9eab36',
    '8. 00df5b9333954b4f4beaa8be4dc7374c0af4caf2',
    '9. 00e2453df8783bf0fe5c3df9dc51f66762e7d506',
    '10. 00f1976d108daf1400bc103474adf7cf1ee80fba',
    '11. 00fa0d47c35ae7baa5510cd4786d94d30ff4f6fa',
    '12. 02f53dccaa67d3e5144a6af659840a15b61e3e1b'
]

for f in test_data:
    i=lbs.index(f.split()[1])
    l=cluster.labels_[i]
    if l in group_dict:
        if len(group_dict[l])>1:
            min_dist = float('inf')
            for j in range(len(group_dict[l])):
                index = lbs.index(group_dict[l][j].split()[1])
                dist = np.linalg.norm(np.array(feats[index]) - np.array(feats[i]))
                if dist < min_dist:
                    min_dist = dist
                    ans = group_dict[l][j]
            print(f, ans)
        else:
            print(f, group_dict[l][0])

COLORS=['r','g','b', 'c', 'm', 'y', 'k', 'w']

pca = PCA(n_components=2)
pca = pca.fit(feats)
X = pca.transform(feats)
plt.scatter(X[:,0], X[:,1])
for i in range(len(cluster.labels_)):
    plt.scatter(X[i,0], X[i,1], c=COLORS[cluster.labels_[i]])
plt.show()